package com.example.demo.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.4.
 */
@SuppressWarnings("rawtypes")
public class Erc1155Asset extends Contract {
    public static final String BINARY = "60e060405260256080818152906200298a60a0398051620000299160049160209091019062000200565b503480156200003757600080fd5b506040518060600160405280602e8152602001620029af602e9139620000668164010000000062000105810204565b506200008f6000620000806401000000006200011e810204565b64010000000062000122810204565b620000c77f8d0004bfdb832b5a70957969c9fd2decb620acc571548f215ca933f039fc2d7e620000806401000000006200011e810204565b620000ff7ff11ce18ba497884f62649b37017dc60102aeae74123c29b7a9c18f0a6ed2f07b620000806401000000006200011e810204565b620002fc565b80516200011a90600290602084019062000200565b5050565b3390565b6200011a828264010000000062000137810204565b6200014c8282640100000000620001d5810204565b6200011a576000828152600360209081526040808320600160a060020a03851684529091529020805460ff19166001179055620001916401000000006200011e810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b8280546200020e90620002a6565b90600052602060002090601f0160209004810192826200023257600085556200027d565b82601f106200024d57805160ff19168380011785556200027d565b828001600101855582156200027d579182015b828111156200027d57825182559160200191906001019062000260565b506200028b9291506200028f565b5090565b5b808211156200028b576000815560010162000290565b600281046001821680620002bb57607f821691505b60208210811415620002f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b61267e806200030c6000396000f3fe608060405234801561001057600080fd5b5060043610610148576000357c0100000000000000000000000000000000000000000000000000000000900480636b20c454116100ca578063b112d47e1161008e578063b112d47e146102a3578063d547741f146102ca578063e985e9c5146102dd578063f084219e14610319578063f242432a1461034057600080fd5b80636b20c4541461024f578063731133e91461026257806391d1485414610275578063a217fddf14610288578063a22cb4651461029057600080fd5b80632eb2c2d6116101115780632eb2c2d6146101ee5780632f2ff15d1461020157806336568abe146102145780634b97aed9146102275780634e1273f41461022f57600080fd5b8062fdd58e1461014d57806301ffc9a7146101735780630e89341c146101965780631f7fdffa146101b6578063248a9ca3146101cb575b600080fd5b61016061015b366004611a22565b610353565b6040519081526020015b60405180910390f35b610186610181366004611a65565b6103ff565b604051901515815260200161016a565b6101a96101a4366004611a82565b610410565b60405161016a9190611af3565b6101c96101c4366004611c52565b610444565b005b6101606101d9366004611a82565b60009081526003602052604090206001015490565b6101c96101fc366004611ceb565b6104cf565b6101c961020f366004611d95565b610574565b6101c9610222366004611d95565b61059f565b61016061062e565b61024261023d366004611dc1565b61063e565b60405161016a9190611ec4565b6101c961025d366004611ed7565b61077f565b6101c9610270366004611f4b565b610803565b610186610283366004611d95565b610888565b610160600081565b6101c961029e366004611fa0565b6108b3565b6101607ff11ce18ba497884f62649b37017dc60102aeae74123c29b7a9c18f0a6ed2f07b81565b6101c96102d8366004611d95565b6108be565b6101866102eb366004611fdc565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101607f8d0004bfdb832b5a70957969c9fd2decb620acc571548f215ca933f039fc2d7e81565b6101c961034e366004612006565b6108e4565b6000600160a060020a0383166103d95760405160e560020a62461bcd02815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260208181526040808320600160a060020a03949094168352929052205490565b600061040a82610982565b92915050565b6060600461041d836109c0565b60405160200161042e929190612087565b6040516020818303038152906040529050919050565b61046e7f8d0004bfdb832b5a70957969c9fd2decb620acc571548f215ca933f039fc2d7e33610888565b6104bd5760405160e560020a62461bcd02815260206004820152601660248201527f43616c6c6572206973206e6f742061206d696e7465720000000000000000000060448201526064016103d0565b6104c984848484610b01565b50505050565b600160a060020a0385163314806104eb57506104eb85336102eb565b6105605760405160e560020a62461bcd02815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016103d0565b61056d8585858585610c52565b5050505050565b6000828152600360205260409020600101546105908133610df7565b61059a8383610e5e565b505050565b600160a060020a03811633146106205760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016103d0565b61062a8282610ee4565b5050565b600061063960055490565b905090565b606081518351146106ba5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016103d0565b6000835167ffffffffffffffff8111156106d6576106d6611b06565b6040519080825280602002602001820160405280156106ff578160200160208202803683370190505b50905060005b84518110156107775761074a8582815181106107235761072361215d565b602002602001015185838151811061073d5761073d61215d565b6020026020010151610353565b82828151811061075c5761075c61215d565b60209081029190910101526107708161218f565b9050610705565b509392505050565b6107a97ff11ce18ba497884f62649b37017dc60102aeae74123c29b7a9c18f0a6ed2f07b33610888565b6107f85760405160e560020a62461bcd02815260206004820152601660248201527f43616c6c6572206973206e6f742061206275726e65720000000000000000000060448201526064016103d0565b61059a838383610f4b565b61082d7f8d0004bfdb832b5a70957969c9fd2decb620acc571548f215ca933f039fc2d7e33610888565b61087c5760405160e560020a62461bcd02815260206004820152601660248201527f43616c6c6572206973206e6f742061206d696e7465720000000000000000000060448201526064016103d0565b6104c98484848461117b565b6000918252600360209081526040808420600160a060020a0393909316845291905290205460ff1690565b61062a33838361124e565b6000828152600360205260409020600101546108da8133610df7565b61059a8383610ee4565b600160a060020a038516331480610900575061090085336102eb565b6109755760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016103d0565b61056d8585858585611346565b6000600160e060020a031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061040a575061040a82611469565b606081610a0057505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610a2a5780610a148161218f565b9150610a239050600a836121c3565b9150610a04565b60008167ffffffffffffffff811115610a4557610a45611b06565b6040519080825280601f01601f191660200182016040528015610a6f576020820181803683370190505b5090505b8415610af957610a846001836121d7565b9150610a91600a866121ee565b610a9c906030612202565b7f010000000000000000000000000000000000000000000000000000000000000002818381518110610ad057610ad061215d565b6020010190600160f860020a031916908160001a905350610af2600a866121c3565b9450610a73565b949350505050565b600160a060020a038416610b2a5760405160e560020a62461bcd0281526004016103d09061221a565b8151835114610b4e5760405160e560020a62461bcd0281526004016103d090612277565b3360005b8451811015610bea57838181518110610b6d57610b6d61215d565b6020026020010151600080878481518110610b8a57610b8a61215d565b60200260200101518152602001908152602001600020600088600160a060020a0316600160a060020a031681526020019081526020016000206000828254610bd29190612202565b90915550819050610be28161218f565b915050610b52565b5084600160a060020a03166000600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c3b9291906122d4565b60405180910390a461056d81600087878787611504565b8151835114610c765760405160e560020a62461bcd0281526004016103d090612277565b600160a060020a038416610c9f5760405160e560020a62461bcd0281526004016103d0906122f9565b3360005b8451811015610d89576000858281518110610cc057610cc061215d565b602002602001015190506000858381518110610cde57610cde61215d565b60209081029190910181015160008481528083526040808220600160a060020a038e168352909352919091205490915081811015610d315760405160e560020a62461bcd0281526004016103d090612356565b600083815260208181526040808320600160a060020a038e8116855292528083208585039055908b16825281208054849290610d6e908490612202565b9250508190555050505080610d829061218f565b9050610ca3565b5084600160a060020a031686600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610dd99291906122d4565b60405180910390a4610def818787878787611504565b505050505050565b610e018282610888565b61062a57610e1981600160a060020a031660146116b3565b610e248360206116b3565b604051602001610e359291906123b3565b60408051601f198184030181529082905260e560020a62461bcd0282526103d091600401611af3565b610e688282610888565b61062a576000828152600360209081526040808320600160a060020a03851684529091529020805460ff19166001179055610ea03390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610eee8282610888565b1561062a576000828152600360209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600160a060020a038316610fca5760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103d0565b8051825114610fee5760405160e560020a62461bcd0281526004016103d090612277565b604080516020810190915260009081905233905b835181101561111c57600084828151811061101f5761101f61215d565b60200260200101519050600084838151811061103d5761103d61215d565b60209081029190910181015160008481528083526040808220600160a060020a038c1683529093529190912054909150818110156110e55760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016103d0565b600092835260208381526040808520600160a060020a038b16865290915290922091039055806111148161218f565b915050611002565b506000600160a060020a031684600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161116d9291906122d4565b60405180910390a450505050565b600160a060020a0384166111a45760405160e560020a62461bcd0281526004016103d09061221a565b336111be816000876111b5886118bc565b61056d886118bc565b600084815260208181526040808320600160a060020a0389168452909152812080548592906111ee908490612202565b90915550506040805185815260208101859052600160a060020a0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461056d81600087878787611907565b81600160a060020a031683600160a060020a031614156112d95760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016103d0565b600160a060020a03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600160a060020a03841661136f5760405160e560020a62461bcd0281526004016103d0906122f9565b3361137f8187876111b5886118bc565b600084815260208181526040808320600160a060020a038a168452909152902054838110156113c35760405160e560020a62461bcd0281526004016103d090612356565b600085815260208181526040808320600160a060020a038b8116855292528083208785039055908816825281208054869290611400908490612202565b90915550506040805186815260208101869052600160a060020a03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611460828888888888611907565b50505050505050565b6000600160e060020a031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806114cc5750600160e060020a031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061040a57507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a031983161461040a565b600160a060020a0384163b15610def576040517fbc197c81000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063bc197c81906115619089908990889088908890600401612434565b602060405180830381600087803b15801561157b57600080fd5b505af19250505080156115ab575060408051601f3d908101601f191682019092526115a891810190612492565b60015b611667576115b76124af565b806308c379a014156115f457506115cc6124e8565b806115d757506115f6565b8060405160e560020a62461bcd0281526004016103d09190611af3565b505b60405160e560020a62461bcd02815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016103d0565b600160e060020a031981167fbc197c8100000000000000000000000000000000000000000000000000000000146114605760405160e560020a62461bcd0281526004016103d090612572565b606060006116c28360026125cf565b6116cd906002612202565b67ffffffffffffffff8111156116e5576116e5611b06565b6040519080825280601f01601f19166020018201604052801561170f576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106117465761174661215d565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106117915761179161215d565b6020010190600160f860020a031916908160001a90535060006117b58460026125cf565b6117c0906001612202565b90505b6001811115611863577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118015761180161215d565b1a7f0100000000000000000000000000000000000000000000000000000000000000028282815181106118365761183661215d565b6020010190600160f860020a031916908160001a90535060109094049361185c816125ee565b90506117c3565b5083156118b55760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103d0565b9392505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118f6576118f661215d565b602090810291909101015292915050565b600160a060020a0384163b15610def576040517ff23a6e61000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063f23a6e61906119649089908990889088908890600401612605565b602060405180830381600087803b15801561197e57600080fd5b505af19250505080156119ae575060408051601f3d908101601f191682019092526119ab91810190612492565b60015b6119ba576115b76124af565b600160e060020a031981167ff23a6e6100000000000000000000000000000000000000000000000000000000146114605760405160e560020a62461bcd0281526004016103d090612572565b8035600160a060020a0381168114611a1d57600080fd5b919050565b60008060408385031215611a3557600080fd5b611a3e83611a06565b946020939093013593505050565b600160e060020a031981168114611a6257600080fd5b50565b600060208284031215611a7757600080fd5b81356118b581611a4c565b600060208284031215611a9457600080fd5b5035919050565b60005b83811015611ab6578181015183820152602001611a9e565b838111156104c95750506000910152565b60008151808452611adf816020860160208601611a9b565b601f01601f19169290920160200192915050565b6020815260006118b56020830184611ac7565b60e060020a634e487b7102600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611b4557611b45611b06565b6040525050565b600067ffffffffffffffff821115611b6657611b66611b06565b5060209081020190565b600082601f830112611b8157600080fd5b81356020611b8e82611b4c565b604051611b9b8282611b1f565b8381529282028501820192828101915086841115611bb857600080fd5b8286015b84811015611bd35780358352918301918301611bbc565b509695505050505050565b600082601f830112611bef57600080fd5b813567ffffffffffffffff811115611c0957611c09611b06565b604051611c20601f8301601f191660200182611b1f565b818152846020838601011115611c3557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611c6857600080fd5b611c7185611a06565b9350602085013567ffffffffffffffff80821115611c8e57600080fd5b611c9a88838901611b70565b94506040870135915080821115611cb057600080fd5b611cbc88838901611b70565b93506060870135915080821115611cd257600080fd5b50611cdf87828801611bde565b91505092959194509250565b600080600080600060a08688031215611d0357600080fd5b611d0c86611a06565b9450611d1a60208701611a06565b9350604086013567ffffffffffffffff80821115611d3757600080fd5b611d4389838a01611b70565b94506060880135915080821115611d5957600080fd5b611d6589838a01611b70565b93506080880135915080821115611d7b57600080fd5b50611d8888828901611bde565b9150509295509295909350565b60008060408385031215611da857600080fd5b82359150611db860208401611a06565b90509250929050565b60008060408385031215611dd457600080fd5b823567ffffffffffffffff80821115611dec57600080fd5b818501915085601f830112611e0057600080fd5b81356020611e0d82611b4c565b604051611e1a8282611b1f565b8381529282028501820192828101915089841115611e3757600080fd5b948201945b83861015611e5c57611e4d86611a06565b82529482019490820190611e3c565b96505086013592505080821115611e7257600080fd5b50611e7f85828601611b70565b9150509250929050565b600081518084526020808501945080840160005b83811015611eb957815187529582019590820190600101611e9d565b509495945050505050565b6020815260006118b56020830184611e89565b600080600060608486031215611eec57600080fd5b611ef584611a06565b9250602084013567ffffffffffffffff80821115611f1257600080fd5b611f1e87838801611b70565b93506040860135915080821115611f3457600080fd5b50611f4186828701611b70565b9150509250925092565b60008060008060808587031215611f6157600080fd5b611f6a85611a06565b93506020850135925060408501359150606085013567ffffffffffffffff811115611f9457600080fd5b611cdf87828801611bde565b60008060408385031215611fb357600080fd5b611fbc83611a06565b915060208301358015158114611fd157600080fd5b809150509250929050565b60008060408385031215611fef57600080fd5b611ff883611a06565b9150611db860208401611a06565b600080600080600060a0868803121561201e57600080fd5b61202786611a06565b945061203560208701611a06565b93506040860135925060608601359150608086013567ffffffffffffffff81111561205f57600080fd5b611d8888828901611bde565b6000815161207d818560208601611a9b565b9290920192915050565b82546000908190600281046001808316806120a357607f831692505b60208084108214156120c65760e060020a634e487b710286526022600452602486fd5b8180156120da57600181146120eb57612118565b60ff19861689528489019650612118565b60008b81526020902060005b868110156121105781548b8201529085019083016120f7565b505084890196505b50505050505061215461212b828661206b565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b95945050505050565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b60006000198214156121a3576121a3612176565b5060010190565b60e060020a634e487b7102600052601260045260246000fd5b6000826121d2576121d26121aa565b500490565b6000828210156121e9576121e9612176565b500390565b6000826121fd576121fd6121aa565b500690565b6000821982111561221557612215612176565b500190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060408201527f6d69736d61746368000000000000000000000000000000000000000000000000606082015260800190565b6040815260006122e76040830185611e89565b82810360208401526121548185611e89565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201527f72207472616e7366657200000000000000000000000000000000000000000000606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123eb816017850160208801611a9b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612428816028840160208801611a9b565b01602801949350505050565b6000600160a060020a03808816835280871660208401525060a0604083015261246060a0830186611e89565b82810360608401526124728186611e89565b905082810360808401526124868185611ac7565b98975050505050505050565b6000602082840312156124a457600080fd5b81516118b581611a4c565b600060033d11156124e55760046000803e7c01000000000000000000000000000000000000000000000000000000006000510490505b90565b600060443d10156124f65790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561252657505050505090565b828501915081518181111561253e5750505050505090565b843d87010160208285010111156125585750505050505090565b61256760208286010187611b1f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a6563746560408201527f6420746f6b656e73000000000000000000000000000000000000000000000000606082015260800190565b60008160001904831182151516156125e9576125e9612176565b500290565b6000816125fd576125fd612176565b506000190190565b6000600160a060020a03808816835280871660208401525084604083015283606083015260a0608083015261263d60a0830184611ac7565b97965050505050505056fea26469706673582212200a6f982a94ce2e41ac7506d33454d06796eab4ad16083ae38694becf0a0255bb64736f6c6343000809003368747470733a2f2f6379626572706f702e6d7970696e6174612e636c6f75642f697066732f68747470733a2f2f6379626572706f702e6d7970696e6174612e636c6f75642f697066732f7b69647d2e6a736f6e";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_BURNERROLE = "burnerRole";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_MINTERROLE = "minterRole";

    public static final String FUNC_NUMOPTIONS = "numOptions";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event URI_EVENT = new Event("URI",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    @Deprecated
    protected Erc1155Asset(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Erc1155Asset(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Erc1155Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Erc1155Asset(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, account),
                        new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String from, List<BigInteger> ids, List<BigInteger> amounts) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH,
                Arrays.<Type>asList(new Address(160, from),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> burnerRole() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BURNERROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, account),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Uint256(id),
                        new Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> minterRole() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTERROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> numOptions() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMOPTIONS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, Uint256.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(id),
                        new Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> uri(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI,
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Erc1155Asset load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc1155Asset(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Erc1155Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc1155Asset(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Erc1155Asset load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Erc1155Asset(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Erc1155Asset load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Erc1155Asset(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Erc1155Asset> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc1155Asset.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Erc1155Asset> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc1155Asset.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc1155Asset> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc1155Asset.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc1155Asset> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc1155Asset.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }
}
